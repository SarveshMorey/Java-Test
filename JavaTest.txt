Sarvesh Morey
Bracnch- Computer Engineering
sarveshmorey01@gmail.com
JSPM's Rajarshi Shahu College of Engineering, Pune


Q1: Merge two arrays by satisfying given constraints
Given two sorted arrays X[] and Y[] of size m and n each where m >= n and X[] has exactly n vacant cells,
 merge elements of Y[] in their correct position in array X[], i.e., merge (X, Y) by keeping the sorted order.

For example,

Input: X[] = { 0, 2, 0, 3, 0, 5, 6, 0, 0 }
Y[] = { 1, 8, 9, 10, 15 } The vacant cells in X[] is represented by 0 
Output: X[] = { 1, 2, 3, 5, 6, 8, 9, 10, 15 }
-> 
public class MergeArrays {
    public static void mergeArrays(int[] destination, int[] source) {
        int m = destination.length;
        int n = source.length;

        int i = n - 1; 
        int j = 0;   
        int k = 0;  

        while (i >= 0) {
            if (destination[i] != 0) {
                destination[m - 1 - k] = destination[i];
                k++;
            }
            i--;
        }
        i = m - k; 
        while (i < m && j < n) {
            if (destination[i] < source[j]) {
                destination[k] = destination[i];
                i++;
            } else {
                destination[k] = source[j];
                j++;
            }
            k++;
        }

        while (j < n) {
            destination[k] = source[j];
            j++;
            k++;
        }
    }

    public static void main(String[] args) {
        int[] destination = {0, 2, 0, 3, 0, 5, 6, 0, 0};
        int[] source = {1, 8, 9, 10, 15};
        mergeArrays(destination, source);
        System.out.print("Merged array: ");
        for (int num : destination) {
            System.out.print(num + " ");
        }
    }
}


Q2:Find maximum sum path involving elements of given arrays
Given two sorted arrays of integers, find a maximum sum path involving elements of both arrays whose sum is maximum. 
We can start from either array, but we can switch between arrays only through its common elements.

For example,

Input: X = { 3, 6, 7, 8, 10, 12, 15, 18, 100 }
Y = { 1, 2, 3, 5, 7, 9, 10, 11, 15, 16, 18, 25, 50 }  
The maximum sum path is: 1 —> 2 —> 3 —> 6 —> 7 —> 9 —> 10 —> 12 —> 15 —> 16 —> 18 —> 100 
The maximum sum is 199

->
public class MaximumSum {
    public static int findMaximumSumPath(int[] X, int[] Y) {
        int m = X.length;
        int n = Y.length;
        int i = 0, j = 0;
        int sumX = 0, sumY = 0;
        int maxSum = 0;
        while (i < m && j < n) {
            if (X[i] < Y[j]) {
                sumX += X[i++];
            } 
            else if (X[i] > Y[j]) {
                sumY += Y[j++];
            } 
            else {
                maxSum += Math.max(sumX, sumY) + X[i];
                sumX = 0;
                sumY = 0;

                i++;
                j++;
            }
        }

        while (i < m) {
            sumX += X[i++];
        }

        while (j < n) {
            sumY += Y[j++];
        }

        maxSum += Math.max(sumX, sumY);

        return maxSum;
    }

    public static void main(String[] args) {
        int[] X = {3, 6, 7, 8, 10, 12, 15, 18, 100};
        int[] Y = {1, 2, 3, 5, 7, 9, 10, 11, 15, 16, 18, 25, 50};
        System.out.println("The maximum sum path is: " + findMaximumSumPath(X, Y));
    }
}


Q3:Write a Java Program to count the number of words in a string using HashMap.
->
import java.util.HashMap;
import java.util.Map;

public class WordCount {
    public static void main(String[] args) {
        String inputString = "Hello world";
        countWords(inputString);
    }

    public static void countWords(String str) {
        String[] words = str.replaceAll("[^a-zA-Z ]", "").toLowerCase().split("\\s+");
        Map<String, Integer> wordCountMap = new HashMap<>();
        for (String word : words) {
           
            if (wordCountMap.containsKey(word)) {
                wordCountMap.put(word, wordCountMap.get(word) + 1);
            } else {
                
                wordCountMap.put(word, 1);
            }
        }
        System.out.println("Word count in the string:");
        for (Map.Entry<String, Integer> entry : wordCountMap.entrySet()) {
            System.out.println(entry.getKey() + " : " + entry.getValue());
        }
    }
}



Q4:Write a Java Program to find the duplicate characters in a string.
->
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

public class DuplicateCharacters {
    public static void main(String[] args) {
        String inputString = "Hello my name is Sarvesh";
        findDuplicateCharacters(inputString);
    }

    public static void findDuplicateCharacters(String str) {
        Map<Character, Integer> charCountMap = new HashMap<>();
        char[] charArray = str.toCharArray();
        for (char c : charArray) {
            if (charCountMap.containsKey(c)) {
                charCountMap.put(c, charCountMap.get(c) + 1);
            } else {
            
                charCountMap.put(c, 1);
            }
        }

        Set<Map.Entry<Character, Integer>> entrySet = charCountMap.entrySet();
        System.out.println("Duplicate characters in the string '" + str + "' are:");
        for (Map.Entry<Character, Integer> entry : entrySet) {
            if (entry.getValue() > 1) {
                System.out.println(entry.getKey() + " : " + entry.getValue() + " times");
            }
        }
    }
}

